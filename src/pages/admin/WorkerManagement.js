import React, { useState, useEffect } from 'react';
import {
    Box,
    Paper,
    Typography,
    Grid,
    Card,
    CardContent,
    Avatar,
    Chip,
    Table,
    TableHead,
    TableRow,
    TableCell,
    TableBody,
    TableContainer,
    Button,
    TextField,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Alert,
    List,
    ListItem,
    ListItemText,
    ListItemAvatar,
    IconButton,
    Tooltip,
    Badge,
    Stack,
    Divider,
    LinearProgress,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions
} from '@mui/material';
import {
    Person as PersonIcon,
    Work as WorkIcon,
    Event as EventIcon,
    AccessTime as AccessTimeIcon,
    CheckCircle as CheckCircleIcon,
    Cancel as CancelIcon,
    Warning as WarningIcon,
    Add as AddIcon,
    Search as SearchIcon,
    FilterList as FilterIcon,
    Assignment as AssignmentIcon,
    LocationOn as LocationIcon,
    Schedule as ScheduleIcon,
    Today as TodayIcon,
    Timeline as TimelineIcon,
    Speed as SpeedIcon
} from '@mui/icons-material';
import { 
    fetchFarmers, 
    listTasks, 
    fetchLeaveRequests, 
    createTask,
    lotsList
} from '../../services/api';

export default function WorkerManagement() {
    const [farmers, setFarmers] = useState([]);
    const [tasks, setTasks] = useState([]);
    const [leaveRequests, setLeaveRequests] = useState([]);
    const [lots, setLots] = useState([]);
    const [loading, setLoading] = useState(true);
    const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
    const [dateRange, setDateRange] = useState(14); // 14 days
    const [filterStatus, setFilterStatus] = useState('all');
    const [searchLocation, setSearchLocation] = useState('');
    const [quickAssignDialog, setQuickAssignDialog] = useState(false);
    const [quickTask, setQuickTask] = useState({
        title: '',
        startTime: '',
        location: '',
        duration: 8
    });

    useEffect(() => {
        loadData();
    }, []);

    const loadData = async () => {
        try {
            setLoading(true);
            const [farmersRes, tasksRes, leaveRes, lotsRes] = await Promise.all([
                fetchFarmers(),
                listTasks(),
                fetchLeaveRequests().catch(() => ({ data: [] })),
                lotsList().catch(() => ({ data: [] }))
            ]);
            
            setFarmers(farmersRes?.data || []);
            setTasks(tasksRes?.data || []);
            setLeaveRequests(leaveRes?.data || []);
            setLots(lotsRes?.data || []);
        } catch (error) {
            console.error('Error loading data:', error);
        } finally {
            setLoading(false);
        }
    };

    // 1. T√≠nh to√°n tr·∫°ng th√°i nh√¢n c√¥ng cho ng√†y c·ª• th·ªÉ
    const getWorkerStatusForDate = (workerId, date) => {
        // Ki·ªÉm tra ngh·ªâ ph√©p
        const onLeave = leaveRequests.some(req => 
            String(req.worker_id) === String(workerId) && 
            req.status === 'approved' &&
            req.start_date <= date && 
            req.end_date >= date
        );

        if (onLeave) return { 
            status: 'leave', 
            label: 'Ngh·ªâ ph√©p', 
            color: 'error',
            hours: 0,
            maxHours: 8 
        };

        // T√≠nh t·ªïng gi·ªù l√†m vi·ªác trong ng√†y
        const dayTasks = tasks.filter(task => {
            if (!task.ma_nguoi_dung) return false;
            const assignedWorkers = String(task.ma_nguoi_dung).split(',').map(id => id.trim());
            return assignedWorkers.includes(String(workerId)) && 
                   task.ngay_bat_dau <= date && 
                   task.ngay_ket_thuc >= date;
        });

        let totalHours = 0;
        dayTasks.forEach(task => {
            const startTime = task.thoi_gian_bat_dau || '08:00';
            const endTime = task.thoi_gian_ket_thuc || '17:00';
            const [startH, startM] = startTime.split(':').map(Number);
            const [endH, endM] = endTime.split(':').map(Number);
            const hours = (endH + endM/60) - (startH + startM/60);
            totalHours += Math.max(0, hours);
        });

        totalHours = Math.min(totalHours, 8); // Cap at 8 hours

        if (totalHours >= 8) return { 
            status: 'busy', 
            label: 'B·∫≠n ho√†n to√†n', 
            color: 'error',
            hours: totalHours,
            maxHours: 8,
            tasks: dayTasks 
        };
        
        if (totalHours >= 4) return { 
            status: 'partial', 
            label: 'B·∫≠n m·ªôt ph·∫ßn', 
            color: 'warning',
            hours: totalHours,
            maxHours: 8,
            tasks: dayTasks 
        };
        
        return { 
            status: 'free', 
            label: 'R·∫£nh', 
            color: 'success',
            hours: totalHours,
            maxHours: 8,
            tasks: dayTasks 
        };
    };

    // 2. Th·ªëng k√™ cho ng√†y ƒë∆∞·ª£c ch·ªçn
    const getDailyStats = () => {
        let free = 0, partial = 0, busy = 0, leave = 0;
        
        farmers.forEach(worker => {
            const status = getWorkerStatusForDate(worker.id, selectedDate);
            switch (status.status) {
                case 'free': free++; break;
                case 'partial': partial++; break;
                case 'busy': busy++; break;
                case 'leave': leave++; break;
            }
        });

        return { free, partial, busy, leave };
    };

    // 3. L·ªçc nh√¢n c√¥ng theo ƒëi·ªÅu ki·ªán
    const getFilteredWorkers = () => {
        let filtered = farmers;

        if (filterStatus !== 'all') {
            filtered = filtered.filter(worker => {
                const status = getWorkerStatusForDate(worker.id, selectedDate);
                return status.status === filterStatus;
            });
        }

        if (searchLocation) {
            // Simple location filter - would need more sophisticated logic
            filtered = filtered.filter(worker => 
                worker.full_name?.toLowerCase().includes(searchLocation.toLowerCase())
            );
        }

        return filtered;
    };

    // 4. ƒê·ªÅ xu·∫•t nh√¢n c√¥ng cho nhi·ªám v·ª• kh·∫©n c·∫•p
    const getSuggestedWorkers = () => {
        return farmers
            .map(worker => {
                const status = getWorkerStatusForDate(worker.id, selectedDate);
                const availableHours = status.maxHours - status.hours;
                
                return {
                    ...worker,
                    status,
                    availableHours,
                    priority: status.status === 'free' ? 3 : 
                             status.status === 'partial' ? 2 : 0
                };
            })
            .filter(worker => worker.availableHours >= quickTask.duration)
            .sort((a, b) => b.priority - a.priority || b.availableHours - a.availableHours)
            .slice(0, 5);
    };

    // 5. Ph√¢n c√¥ng nhanh
    const handleQuickAssign = async (workerId) => {
        try {
            const startTime = quickTask.startTime || '08:00';
            const [hour, minute] = startTime.split(':').map(Number);
            const endHour = hour + quickTask.duration;
            const endTime = `${endHour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;

            await createTask({
                ten_cong_viec: quickTask.title,
                mo_ta: `Nhi·ªám v·ª• kh·∫©n c·∫•p - ${quickTask.location}`,
                loai_cong_viec: 'khac',
                ngay_bat_dau: selectedDate,
                ngay_ket_thuc: selectedDate,
                thoi_gian_bat_dau: startTime,
                thoi_gian_ket_thuc: endTime,
                trang_thai: 'chua_bat_dau',
                uu_tien: 'cao',
                ma_nguoi_dung: workerId,
                ghi_chu: 'Ph√¢n c√¥ng kh·∫©n c·∫•p qua h·ªá th·ªëng'
            });

            setQuickAssignDialog(false);
            setQuickTask({ title: '', startTime: '', location: '', duration: 8 });
            await loadData(); // Reload data
            alert('Ph√¢n c√¥ng th√†nh c√¥ng!');
        } catch (error) {
            console.error('Error assigning task:', error);
            alert('L·ªói ph√¢n c√¥ng: ' + error.message);
        }
    };

    const stats = getDailyStats();
    const filteredWorkers = getFilteredWorkers();

    if (loading) {
        return (
            <Box sx={{ p: 3, textAlign: 'center' }}>
                <Typography>ƒêang t·∫£i d·ªØ li·ªáu...</Typography>
            </Box>
        );
    }

    return (
        <Box sx={{ p: 3 }}>
            <Typography variant="h4" sx={{ mb: 1, fontWeight: 'bold' }}>
                Dashboard Qu·∫£n l√≠ Nh√¢n c√¥ng 
            </Typography>
            

            <Grid container spacing={3}>
                {/* 1. T·ªîNG QUAN S·∫¥NG S√ÄNG THEO NG√ÄY */}
                <Grid item xs={12} lg={4}>
                    <Paper sx={{ p: 3, height: 'fit-content' }}>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                            üìÖ <Box sx={{ ml: 1 }}>T·ªïng quan S·∫µn s√†ng Theo Ng√†y</Box>
                        </Typography>

                        {/* Date Picker */}
                        <TextField
                            label="Ch·ªçn ng√†y"
                            type="date"
                            value={selectedDate}
                            onChange={(e) => setSelectedDate(e.target.value)}
                            fullWidth
                            sx={{ mb: 3 }}
                            InputLabelProps={{ shrink: true }}
                        />

                        {/* KPI Cards */}
                        <Grid container spacing={2} sx={{ mb: 3 }}>
                            <Grid item xs={6}>
                                <Card sx={{ textAlign: 'center', bgcolor: 'success.light', color: 'white' }}>
                                    <CardContent sx={{ py: 2 }}>
                                        <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                                            {stats.free}
                                        </Typography>
                                        <Typography variant="body2">ƒêang r·∫£nh</Typography>
                                    </CardContent>
                                </Card>
                            </Grid>
                            <Grid item xs={6}>
                                <Card sx={{ textAlign: 'center', bgcolor: 'warning.light', color: 'white' }}>
                                    <CardContent sx={{ py: 2 }}>
                                        <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                                            {stats.partial}
                                        </Typography>
                                        <Typography variant="body2">B·∫≠n 1 ph·∫ßn</Typography>
                                    </CardContent>
                                </Card>
                            </Grid>
                            <Grid item xs={6}>
                                <Card sx={{ textAlign: 'center', bgcolor: 'error.light', color: 'white' }}>
                                    <CardContent sx={{ py: 2 }}>
                                        <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                                            {stats.busy}
                                        </Typography>
                                        <Typography variant="body2">B·∫≠n to√†n b·ªô</Typography>
                                    </CardContent>
                                </Card>
                            </Grid>
                            <Grid item xs={6}>
                                <Card sx={{ textAlign: 'center', bgcolor: 'grey.600', color: 'white' }}>
                                    <CardContent sx={{ py: 2 }}>
                                        <Typography variant="h4" sx={{ fontWeight: 'bold' }}>
                                            {stats.leave}
                                        </Typography>
                                        <Typography variant="body2">Ngh·ªâ ph√©p</Typography>
                                    </CardContent>
                                </Card>
                            </Grid>
                        </Grid>

                        {/* Filters */}
                        <Stack direction="row" spacing={1} sx={{ mb: 2 }}>
                            <FormControl size="small" sx={{ minWidth: 120 }}>
                                <InputLabel>L·ªçc tr·∫°ng th√°i</InputLabel>
                                <Select
                                    value={filterStatus}
                                    label="L·ªçc tr·∫°ng th√°i"
                                    onChange={(e) => setFilterStatus(e.target.value)}
                                >
                                    <MenuItem value="all">T·∫•t c·∫£</MenuItem>
                                    <MenuItem value="free">ƒêang r·∫£nh</MenuItem>
                                    <MenuItem value="partial">B·∫≠n 1 ph·∫ßn</MenuItem>
                                    <MenuItem value="busy">B·∫≠n ho√†n to√†n</MenuItem>
                                    <MenuItem value="leave">Ngh·ªâ ph√©p</MenuItem>
                                </Select>
                            </FormControl>
                        </Stack>

                        {/* Worker List */}
                        <Box sx={{ maxHeight: 400, overflow: 'auto' }}>
                            <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                                Danh s√°ch nh√¢n c√¥ng ({filteredWorkers.length})
                            </Typography>
                            <List dense>
                                {filteredWorkers.map((worker) => {
                                    const status = getWorkerStatusForDate(worker.id, selectedDate);
                                    return (
                                        <ListItem key={worker.id} sx={{ px: 0 }}>
                                            <ListItemAvatar>
                                                <Avatar sx={{ 
                                                    bgcolor: status.color === 'success' ? 'success.main' :
                                                             status.color === 'warning' ? 'warning.main' :
                                                             status.color === 'error' ? 'error.main' : 'grey.500',
                                                    width: 32, height: 32 
                                                }}>
                                                    {(worker.full_name || 'N')[0]}
                                                </Avatar>
                                            </ListItemAvatar>
                                            <ListItemText
                                                primary={worker.full_name || `ND-${worker.id}`}
                                                secondary={
                                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                        <Chip 
                                                            label={status.label}
                                                            color={status.color}
                                                            size="small"
                                                        />
                                                        <Typography variant="caption">
                                                            {status.hours}h/{status.maxHours}h
                                                        </Typography>
                                                    </Box>
                                                }
                                            />
                                        </ListItem>
                                    );
                                })}
                            </List>
                        </Box>
                    </Paper>
                </Grid>

                {/* 2. BI·ªÇU ƒê·ªí T·∫¢I C√îNG VI·ªÜC */}
                <Grid item xs={12} lg={5}>
                    <Paper sx={{ p: 3, height: 'fit-content' }}>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                            üìä <Box sx={{ ml: 1 }}>Bi·ªÉu ƒë·ªì T·∫£i c√¥ng vi·ªác & S·∫µn s√†ng</Box>
                        </Typography>

                        <FormControl size="small" sx={{ mb: 2, minWidth: 120 }}>
                            <InputLabel>Ph·∫°m vi</InputLabel>
                            <Select
                                value={dateRange}
                                label="Ph·∫°m vi"
                                onChange={(e) => setDateRange(e.target.value)}
                            >
                                <MenuItem value={7}>7 ng√†y</MenuItem>
                                <MenuItem value={14}>14 ng√†y</MenuItem>
                                <MenuItem value={30}>30 ng√†y</MenuItem>
                            </Select>
                        </FormControl>

                        {/* Timeline Chart */}
                        <Box sx={{ maxHeight: 500, overflow: 'auto' }}>
                            {farmers.slice(0, 20).map((worker) => { // Show first 20 for demo
                                const dates = [];
                                for (let i = 0; i < dateRange; i++) {
                                    const date = new Date();
                                    date.setDate(date.getDate() + i);
                                    dates.push(date.toISOString().split('T')[0]);
                                }

                                return (
                                    <Box key={worker.id} sx={{ mb: 2 }}>
                                        <Typography variant="body2" sx={{ mb: 0.5, fontWeight: 'bold' }}>
                                            {worker.full_name || `ND-${worker.id}`}
                                        </Typography>
                                        <Box sx={{ display: 'flex', gap: 0.5 }}>
                                            {dates.map((date) => {
                                                const status = getWorkerStatusForDate(worker.id, date);
                                                const percentage = (status.hours / status.maxHours) * 100;
                                                
                                                return (
                                                    <Tooltip 
                                                        key={date}
                                                        title={
                                                            <Box>
                                                                <Typography variant="body2">{date}</Typography>
                                                                <Typography variant="body2">{status.label}</Typography>
                                                                <Typography variant="body2">{status.hours}h/{status.maxHours}h</Typography>
                                                                {status.tasks && status.tasks.length > 0 && (
                                                                    <Box sx={{ mt: 1 }}>
                                                                        {status.tasks.map((task, idx) => (
                                                                            <Typography key={idx} variant="caption" display="block">
                                                                                ‚Ä¢ {task.ten_cong_viec} ({task.thoi_gian_bat_dau}-{task.thoi_gian_ket_thuc})
                                                                            </Typography>
                                                                        ))}
                                                                    </Box>
                                                                )}
                                                            </Box>
                                                        }
                                                    >
                                                        <Box
                                                            sx={{
                                                                width: 20,
                                                                height: 20,
                                                                bgcolor: status.status === 'free' ? 'success.light' :
                                                                        status.status === 'partial' ? 'warning.light' :
                                                                        status.status === 'busy' ? 'error.light' :
                                                                        'grey.400',
                                                                border: '1px solid #ccc',
                                                                cursor: 'pointer',
                                                                position: 'relative',
                                                                '&:hover': { transform: 'scale(1.2)' }
                                                            }}
                                                        >
                                                            {status.status !== 'leave' && status.status !== 'free' && (
                                                                <Box
                                                                    sx={{
                                                                        position: 'absolute',
                                                                        bottom: 0,
                                                                        left: 0,
                                                                        right: 0,
                                                                        height: `${percentage}%`,
                                                                        bgcolor: 'rgba(0,0,0,0.3)',
                                                                        transition: 'height 0.2s'
                                                                    }}
                                                                />
                                                            )}
                                                        </Box>
                                                    </Tooltip>
                                                );
                                            })}
                                        </Box>
                                    </Box>
                                );
                            })}
                        </Box>
                    </Paper>
                </Grid>

                {/* 3. C√îNG C·ª§ PH√ÇN C√îNG NHANH */}
                <Grid item xs={12} lg={3}>
                    <Paper sx={{ p: 3, height: 'fit-content' }}>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                            üîç <Box sx={{ ml: 1 }}>C√¥ng c·ª• Ph√¢n c√¥ng Nhanh</Box>
                        </Typography>

                        <Button
                            variant="contained"
                            color="primary"
                            fullWidth
                            startIcon={<AddIcon />}
                            onClick={() => setQuickAssignDialog(true)}
                            sx={{ mb: 3 }}
                        >
                            T·∫°o nhi·ªám v·ª• kh·∫©n c·∫•p
                        </Button>

                        <Divider sx={{ mb: 2 }} />

                        <Typography variant="subtitle2" sx={{ mb: 2, fontWeight: 'bold' }}>
                            üèÜ TOP Nh√¢n c√¥ng s·∫µn s√†ng
                        </Typography>

                        <List dense>
                            {getSuggestedWorkers().map((worker, index) => (
                                <ListItem key={worker.id} sx={{ px: 0 }}>
                                    <ListItemAvatar>
                                        <Badge badgeContent={index + 1} color="primary">
                                            <Avatar sx={{ 
                                                bgcolor: 'primary.main',
                                                width: 32, height: 32 
                                            }}>
                                                {(worker.full_name || 'N')[0]}
                                            </Avatar>
                                        </Badge>
                                    </ListItemAvatar>
                                    <ListItemText
                                        primary={worker.full_name || `ND-${worker.id}`}
                                        secondary={
                                            <Box>
                                                <Chip 
                                                    label={worker.status.label}
                                                    color={worker.status.color}
                                                    size="small"
                                                />
                                                <Typography variant="caption" display="block">
                                                    R·∫£nh: {worker.availableHours}h
                                                </Typography>
                                            </Box>
                                        }
                                    />
                                    <IconButton
                                        size="small"
                                        color="primary"
                                        onClick={() => {
                                            setQuickTask({...quickTask, assignTo: worker.id});
                                            setQuickAssignDialog(true);
                                        }}
                                    >
                                        <AssignmentIcon />
                                    </IconButton>
                                </ListItem>
                            ))}
                        </List>
                    </Paper>
                </Grid>
            </Grid>

            {/* Dialog Ph√¢n c√¥ng nhanh */}
            <Dialog 
                open={quickAssignDialog} 
                onClose={() => setQuickAssignDialog(false)}
                maxWidth="sm"
                fullWidth
            >
                <DialogTitle>‚ö° T·∫°o nhi·ªám v·ª• kh·∫©n c·∫•p</DialogTitle>
                <DialogContent>
                    <Box sx={{ mt: 2, display: 'grid', gap: 2 }}>
                        <TextField
                            label="T√™n nhi·ªám v·ª•"
                            value={quickTask.title}
                            onChange={(e) => setQuickTask({...quickTask, title: e.target.value})}
                            fullWidth
                        />
                        
                        <TextField
                            label="Th·ªùi gian b·∫Øt ƒë·∫ßu"
                            type="time"
                            value={quickTask.startTime}
                            onChange={(e) => setQuickTask({...quickTask, startTime: e.target.value})}
                            InputLabelProps={{ shrink: true }}
                            fullWidth
                        />
                        
                        <FormControl fullWidth>
                            <InputLabel>ƒê·ªãa ƒëi·ªÉm (L√¥)</InputLabel>
                            <Select
                                value={quickTask.location}
                                label="ƒê·ªãa ƒëi·ªÉm (L√¥)"
                                onChange={(e) => setQuickTask({...quickTask, location: e.target.value})}
                            >
                                {lots.map((lot) => (
                                    <MenuItem key={lot.id} value={lot.location || `L√¥ ${lot.id}`}>
                                        {lot.location || `L√¥ ${lot.id}`}
                                    </MenuItem>
                                ))}
                                <MenuItem value="Kh√°c">Kh√°c</MenuItem>
                            </Select>
                        </FormControl>
                        
                        <TextField
                            label="Th·ªùi l∆∞·ª£ng (gi·ªù)"
                            type="number"
                            value={quickTask.duration}
                            onChange={(e) => setQuickTask({...quickTask, duration: parseInt(e.target.value)})}
                            fullWidth
                            inputProps={{ min: 1, max: 8 }}
                        />

                        <Typography variant="subtitle2" sx={{ mt: 2, fontWeight: 'bold' }}>
                            ƒê·ªÅ xu·∫•t nh√¢n c√¥ng ph√π h·ª£p:
                        </Typography>
                        
                        <List dense sx={{ bgcolor: 'grey.50', borderRadius: 1 }}>
                            {getSuggestedWorkers().map((worker, index) => (
                                <ListItem 
                                    key={worker.id} 
                                    secondaryAction={
                                        <Button
                                            size="small"
                                            variant="contained"
                                            onClick={() => handleQuickAssign(worker.id)}
                                            disabled={!quickTask.title || !quickTask.startTime}
                                        >
                                            Ph√¢n c√¥ng
                                        </Button>
                                    }
                                >
                                    <ListItemText
                                        primary={`${index + 1}. ${worker.full_name || `ND-${worker.id}`}`}
                                        secondary={`${worker.status.label} - R·∫£nh ${worker.availableHours}h`}
                                    />
                                </ListItem>
                            ))}
                        </List>
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setQuickAssignDialog(false)}>H·ªßy</Button>
                </DialogActions>
            </Dialog>
        </Box>
    );
}